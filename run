#!/bin/bash


_check_server_state() {
  local counter=0
  local max_try=100

  echo -n "Checking instance: "

  while true
    do
      if
        [[ $(docker run --rm ghcr.io/djoongaar/terraform bash -c "aws ec2 describe-instance-status --instance-ids $1 | jq -r '.InstanceStatuses[0].InstanceState.Name'") == "running" ]] &&
        [[ $(docker run --rm ghcr.io/djoongaar/terraform bash -c "aws ec2 describe-instance-status --instance-ids $1 | jq -r '.InstanceStatuses[0].InstanceStatus.Status'") == "ok" ]] &&
        [[ $(docker run --rm ghcr.io/djoongaar/terraform bash -c "aws ec2 describe-instance-status --instance-ids $1 | jq -r '.InstanceStatuses[0].SystemStatus.Status'") == "ok" ]]; then
          break
      else
        if [ "$counter" -gt "$max_try" ]; then
          echo "[FAILED]"
          exit 1
        fi
        counter=$((counter+1))
        echo -n "."
        sleep 5
      fi
    done
  echo "[OK]"
}

_create_server() {
  local server_name="$1"

  docker run \
    --rm \
    --volume "./$server_name:/code/$server_name" \
    --env-file .env \
    ghcr.io/djoongaar/terraform \
    bash -c """
      cd $server_name &&
      terraform init &&
      terraform fmt &&
      terraform validate &&
      terraform apply -auto-approve &&
      chmod 400 .ssh/id_rsa
    """

  # Save instance metadata
  rm -f "$server_name/instance.json" &&
  docker run \
    --rm \
    --volume "./$server_name:/code/$server_name" \
    --env-file .env \
    ghcr.io/djoongaar/terraform \
    bash -c """
      cd $server_name &&
      terraform output -json
    """ > "$server_name/instance.json"

  # Creating inventory

  local instance_private_ip=$(cat "$server_name/instance.json" | jq -r '.instance_private_ip.value')

  rm -f "$server_name/inventory.ini" &&
  echo "[myhosts]" >> "$server_name/inventory.ini"
  echo  "$instance_private_ip" >> "$server_name/inventory.ini"
}

_destroy_server() {
  local server_name="$1"

  docker run \
    --rm \
    --volume "./$server_name:/code/$server_name" \
    --env-file .env \
    ghcr.io/djoongaar/terraform \
    bash -c """
      cd $server_name &&
      terraform destroy -auto-approve
    """

  rm -f "$server_name/instance.json"
  rm -f "$server_name/inventory.ini"
  rm -rf "$server_name/.ssh"
}

_create_vpn_server() {
  docker run \
    --rm \
    --volume "./vpn:/code/vpn" \
    --env-file .env \
    ghcr.io/djoongaar/terraform \
    bash -c """
      cd vpn &&
      terraform init &&
      terraform fmt &&
      terraform validate &&
      terraform apply -auto-approve &&
      chmod 400 .ssh/id_rsa
    """

  # Save instance metadata
  rm -f vpn/instance.json &&
  docker run \
    --rm \
    --volume "./vpn:/code/vpn" \
    --env-file .env \
    ghcr.io/djoongaar/terraform \
    bash -c """
      cd vpn &&
      terraform output -json
    """ > vpn/instance.json

  # Creating inventory

  local instance_public_ip=$(cat vpn/instance.json | jq -r '.instance_public_ip.value')

  rm -f vpn/inventory.ini &&
  echo "[myhosts]" >> vpn/inventory.ini
  echo  "$instance_public_ip" >> vpn/inventory.ini
}

_destroy_vpn_server() {
  docker run \
    --rm \
    --volume "./vpn:/code/vpn" \
    --env-file .env \
    ghcr.io/djoongaar/terraform \
    bash -c """
      cd vpn &&
      terraform destroy -auto-approve
    """

  rm -f vpn/instance.json
  rm -f vpn/inventory.ini
  rm -rf vpn/.ssh
}

_install_openvpn() {
  local instance_id=$(cat vpn/instance.json | jq -r '.instance_id.value')

  _check_server_state "$instance_id"

  docker run \
    --rm \
    --volume "./vpn:/code/vpn" \
    --env-file .env \
    ghcr.io/djoongaar/terraform \
    bash -c "ansible-playbook -v -i vpn/inventory.ini vpn/openvpn.yml"
}

_install_postgresql() {
  local instance_id=$(cat postgres/instance.json | jq -r '.instance_id.value')

  _check_server_state "$instance_id"

  docker run \
    --rm \
    --volume "./postgres:/code/postgres" \
    --env-file .env \
    ghcr.io/djoongaar/terraform \
    bash -c "ansible-playbook -v -i postgres/inventory.ini postgres/postgres.yml"
}

_validate_client_name() {
  local client_name="$1"

  if
    [[ ${#client_name} -gt 2 ]] &&
    [[ "$client_name" =~ ^[0-9a-zA-Z_]+$ ]]; then
    echo "client_name: $client_name"
  else
    echo """
      Client name is not valid!
      The name must be at least 3 characters long.
      The name must contain only alphanumeric characters.
      """
    exit 1
  fi
}

_add_vpn_client() {
  local client_name="$1"
  local instance_id=$(cat vpn/instance.json | jq -r '.instance_id.value')
  local instance_public_ip=$(cat vpn/instance.json | jq -r '.instance_public_ip.value')

  _validate_client_name "$client_name"
  _check_server_state "$instance_id"

  docker run \
    --rm \
    --volume "./vpn:/code/vpn" \
    ghcr.io/djoongaar/terraform \
    bash -c "ansible-playbook -v -i vpn/inventory.ini vpn/add_client.yml -e \"new_client=$client_name\""

  docker run \
    --rm \
    --volume "./vpn:/code/vpn" \
    --env-file .env \
    ghcr.io/djoongaar/terraform \
    bash -c "scp -i vpn/.ssh/id_rsa $instance_public_ip:~/client-configs/files/$client_name.ovpn vpn/$client_name.ovpn"
}

if [ "$1" = "--create-vpn-server" ]; then
	_create_vpn_server
elif [ "$1" = "--create-postgres-server"  ]; then
  _create_server "postgres"
elif [ "$1" = "--create-ldap-server"  ]; then
  _create_server "ldap"
elif [ "$1" = "--install-openvpn" ]; then
  _install_openvpn
  _add_vpn_client "admin"
elif [ "$1" = "--install-postgresql" ]; then
  _install_postgresql
elif [ "$1" = "--destroy-vpn-server" ]; then
  _destroy_vpn_server
elif [ "$1" = "--destroy-postgres-server"  ]; then
  _destroy_server "postgres"
elif [ "$1" = "--destroy-ldap-server"  ]; then
  _destroy_server "ldap"
elif [ "$1" = "--add-vpn-client" ]; then
  if [ -z $2 ]; then
    echo "You should provide client name"
  else
    # TODO: Проверять уникально ли имя, если нет то возвращать ошибку
    _add_vpn_client "$2"
  fi
else
  echo "No such command: $1"
fi

# TODO: Install and configure PostgreSQL
# TODO: Create instance for LDAP
# TODO: Install LDAP and create test user
# TODO: Configure LDAP authentication for PostgreSQL server